{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'hublib'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-5443d2cc77e7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mhublib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_line_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'use'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'libra-4.4.0'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0msys\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'hublib'"
     ]
    }
   ],
   "source": [
    "import hublib.use\n",
    "\n",
    "%use libra-4.4.0\n",
    "\n",
    "import sys\n",
    "import cmath\n",
    "import math\n",
    "import os\n",
    "\n",
    "if sys.platform==\"cygwin\":\n",
    "    from cyglibra_core import *\n",
    "elif sys.platform==\"linux\" or sys.platform==\"linux2\":\n",
    "    from liblibra_core import *\n",
    "import util.libutil as comn\n",
    "\n",
    "from libra_py import units\n",
    "import matplotlib.pyplot as plt   # plots\n",
    "#matplotlib.use('Agg')\n",
    "#%matplotlib inline \n",
    "\n",
    "import numpy as np\n",
    "#from matplotlib.mlab import griddata\n",
    "\n",
    "plt.rc('axes', titlesize=24)      # fontsize of the axes title\n",
    "plt.rc('axes', labelsize=20)      # fontsize of the x and y labels\n",
    "plt.rc('legend', fontsize=20)     # legend fontsize\n",
    "plt.rc('xtick', labelsize=16)    # fontsize of the tick labels\n",
    "plt.rc('ytick', labelsize=16)    # fontsize of the tick labels\n",
    "\n",
    "plt.rc('figure.subplot', left=0.2)\n",
    "plt.rc('figure.subplot', right=0.95)\n",
    "plt.rc('figure.subplot', bottom=0.13)\n",
    "plt.rc('figure.subplot', top=0.88)\n",
    "\n",
    "colors = {}\n",
    "\n",
    "colors.update({\"11\": \"#8b1a0e\"})  # red       \n",
    "colors.update({\"12\": \"#FF4500\"})  # orangered \n",
    "colors.update({\"13\": \"#B22222\"})  # firebrick \n",
    "colors.update({\"14\": \"#DC143C\"})  # crimson   \n",
    "\n",
    "colors.update({\"21\": \"#5e9c36\"})  # green\n",
    "colors.update({\"22\": \"#006400\"})  # darkgreen  \n",
    "colors.update({\"23\": \"#228B22\"})  # forestgreen\n",
    "colors.update({\"24\": \"#808000\"})  # olive      \n",
    "\n",
    "colors.update({\"31\": \"#8A2BE2\"})  # blueviolet\n",
    "colors.update({\"32\": \"#00008B\"})  # darkblue  \n",
    "\n",
    "colors.update({\"41\": \"#2F4F4F\"})  # darkslategray\n",
    "\n",
    "clrs_index = [\"11\", \"21\", \"31\", \"41\", \"12\", \"22\", \"32\", \"13\",\"23\", \"14\", \"24\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def derivatives(Z, params):\n",
    "    ndof = Z.num_of_rows\n",
    "    ntraj = Z.num_of_cols\n",
    "    mass = params[\"mass\"]     # list of dof items\n",
    "    k = params[\"force_const\"] # -\n",
    "    q0 = params[\"q0\"]         # -\n",
    "        \n",
    "    q = Z.real()\n",
    "    p = Z.imag()\n",
    "    \n",
    "    der = CMATRIX(ndof, ntraj)\n",
    "    \n",
    "    for traj in range(ntraj):\n",
    "        \n",
    "        for dof in range(ndof):\n",
    "            \n",
    "            qi =  q.get(dof, traj)\n",
    "            pi =  p.get(dof, traj)\n",
    "            \n",
    "            val1 = pi/mass[dof]\n",
    "            val2 = -k[dof]*(qi-q0[dof])\n",
    "            \n",
    "            dzdt = val1*(1.0+0.0j)+val2*(0.0+1.0j)\n",
    "            der.set(dof, traj, dzdt )\n",
    "            \n",
    "    return der"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def energies(Z, params):\n",
    "    ndof = Z.num_of_rows\n",
    "    ntraj = Z.num_of_cols\n",
    "    \n",
    "    mass = params[\"mass\"]     # list of dof items\n",
    "    k = params[\"force_const\"] # -\n",
    "    q0 = params[\"q0\"]         # -\n",
    "        \n",
    "    q = Z.real()\n",
    "    p = Z.imag()\n",
    "    \n",
    "    ekin, epot = 0.0, 0.0\n",
    "    \n",
    "    for traj in range(ntraj):        \n",
    "        for dof in range(ndof):\n",
    "            \n",
    "            qi =  q.get(dof, traj)\n",
    "            pi =  p.get(dof, traj)   \n",
    "            \n",
    "            ekin += 0.5*pi*pi/mass[dof]\n",
    "            epot += 0.5*k[dof]*(qi-q0[dof])**2\n",
    "    ekin = ekin / ntraj\n",
    "    epot = epot / ntraj\n",
    "    \n",
    "    etot = ekin + epot\n",
    "    \n",
    "    return ekin, epot, etot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot(T, Ekin, Epot, Etot, q, p):\n",
    "    \n",
    "    #======== Now lets plot what we have computed ===========\n",
    "    plt.figure(1, figsize=(24, 12)) # dpi=300, frameon=False)\n",
    "    plt.subplot(1,2,1)\n",
    "    plt.title('Energies')\n",
    "    plt.xlabel('Time, a.u.')\n",
    "    plt.ylabel('Energy, a.u.')\n",
    "    plt.plot(T, Ekin, label='Kinetic energy', linewidth=2, color = colors[\"11\"]) \n",
    "    plt.plot(T, Epot, label='Potential energy', linewidth=2, color = colors[\"21\"]) \n",
    "    plt.plot(T, Etot, label='Total energy', linewidth=2, color = colors[\"31\"]) \n",
    "    plt.legend()\n",
    "\n",
    "    plt.subplot(1,2,2)\n",
    "    plt.title('Phase space')\n",
    "    plt.xlabel('Coordinate, a.u.')\n",
    "    plt.ylabel('Momenta, a.u.')\n",
    "    plt.plot(q, p, label='', linewidth=2, color = colors[\"11\"])     \n",
    "    plt.legend()\n",
    "        \n",
    "    plt.show()\n",
    "    plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def run_simulations():\n",
    "    \n",
    "    # Initial conditions\n",
    "    Z = CMATRIX(1, 1)\n",
    "    Z.set(0,0, 0.1+0.01j)\n",
    "\n",
    "    # Potential\n",
    "    params = {\"mass\":[1000.0], \"force_const\":[0.001], \"q0\":[0.0]}\n",
    "\n",
    "    # Simulation parameters\n",
    "    dt = 1.0*units.fs2au\n",
    "    nsteps = 500\n",
    "\n",
    "    T, Ekin, Epot, Etot, q, p = [], [], [], [], [], []\n",
    "    for step in range(nsteps):    \n",
    "        ekin, epot, etot = energies(Z, params)\n",
    "    \n",
    "        T.append(step*dt)\n",
    "        Ekin.append(ekin)\n",
    "        Epot.append(epot)\n",
    "        Etot.append(etot)\n",
    "        q.append(Z.get(0,0).real)\n",
    "        p.append(Z.get(0,0).imag)\n",
    "        #print(F\"step = {step} ekin = {ekin} epot = {epot} etot = {etot}\")\n",
    "    \n",
    "        Z = RK4(Z, dt, derivatives, params)\n",
    "    \n",
    "    return T, Ekin, Epot, Etot, q, p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "T, Ekin, Epot, Etot, q, p = run_simulations()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot(T, Ekin, Epot, Etot, q, p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
